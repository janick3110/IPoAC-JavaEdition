@startuml
class dhbw.ipoat.savesystem.LoadSaveGame {
- {static} String jsonString()
+ {static} Player load()
- {static} Animal getAnimalFromType(String,Player,JSONObject)
- {static} Habitat getHabitatFromType(String,Player,JSONObject)
}
class dhbw.ipoat.animals.GrownAnimals {
# int cost
# boolean home
# boolean delivering
# int breedingCooldown
# TransportDevice transport
+ <<Create>> GrownAnimals(Player,int,int,int,String,float,float,HabitatTypes)
+ <<Create>> GrownAnimals(BabyAnimals)
+ <<Create>> GrownAnimals(JSONObject,Player)
+ TransportDevice getTransport()
}
class dhbw.ipoat.computer.Computer {
- float writingSpeed
- float generationSpeed
- List<Medium> mediaInPC
- String nameOfPc
- float puffer
- float maxPuffer
- float cost
- float dataTransmitted
~ Instant pcStartTime
+ <<Create>> Computer(Player)
+ void GenerateData()
+ Instant getPcStartTime()
+ float getPuffer()
+ void transferData(Medium)
+ String getNameOfPc()
}
class dhbw.ipoat.animals.birds.Pigeon {
+ <<Create>> Pigeon(Player)
+ <<Create>> Pigeon(JSONObject,Player)
}
class dhbw.ipoat.medium.Medium {
# String nameOfMedium
# float weight
# float cost
# float data
# String id
# boolean full
+ <<Create>> Medium(String,float,float,float,Player)
+ String getNameOfMedium()
+ boolean isFull()
+ void setFull(boolean)
+ float getData()
+ float getCost()
+ String getId()
+ float getWeight()
+ void setWeight(float)
}
enum dhbw.ipoat.employee.EmployeeNames {
+  Janick
+  Timo
+  Andreas
+  Lars
+  Nico
+  Felix
+  David
+  Markus
+  Christin
+  Claudia
+  Laura
+  Katja
+  Sven
+  Lea
+  Nina
}
interface dhbw.ipoat.GUI {
~ String in()
~ void out(String)
~ void debug(String)
}
class dhbw.ipoat.animals.mammals.Ox {
+ <<Create>> Ox(Player)
}
class dhbw.ipoat.savesystem.Savegame {
- {static} List<Player> allPlayers
+ {static} boolean bypassEncryption
+ {static} void save(Player)
- {static} JSONObject savePlayer(Player)
+ {static} void writeToFile(JSONObject)
}
class dhbw.ipoat.animals.BabyAnimals {
+ <<Create>> BabyAnimals(Animal)
+ void growUp()
}
enum dhbw.ipoat.commands.CommandList {
+  PUT
+  BUY
+  UPGRADE
+  NEXT
+  SEND
+  STATS
+  HELP
+  SELL
+  LIST
+  EXIT
+  LOAD
+  INVENTORY
+  REMOVE
+  PUFFER
+  BREED
+  ATTACH
+  RECRUIT
+  SACK
+  SAVE
+  AUTOSAVE
}
class dhbw.ipoat.habitat.BirdHouse {
+ <<Create>> BirdHouse(Player)
+ <<Create>> BirdHouse(JSONObject,Player)
}
class dhbw.ipoat.transportationdevice.Cart {
- List<Mammal> draughtAnimals
- int sizeOfCart
- int wheelCount
- int animalCount
- boolean home
+ <<Create>> Cart(Player)
+ int getAnimalCount()
+ void setHome(boolean)
+ List<Mammal> getDraughtAnimals()
+ boolean isHome()
+ void putAnimalsInFront(List<Mammal>)
}
class dhbw.ipoat.animals.mammals.Horse {
+ <<Create>> Horse(Player)
}
class dhbw.ipoat.transportationdevice.Bag {
+ <<Create>> Bag(Player)
}
class dhbw.ipoat.events.Event {
+ void doSomethingGoodOrBad(int,Player)
}
enum dhbw.ipoat.animals.birds.BirdList {
+  PIGEON
}
class dhbw.ipoat.habitat.Habitat {
# List<Bird> birdOlds
# int avaliableNests
# int costOfNewNest
# int maxCapacity
# int relaxingFactor
# int amountOfChargingStations
# int costOfChargingStation
# int dailyCost
- Map<String,Animal> mapNameToBird
# List<Animal> animalsInHabitat
# String nameOfHabitat
# Player player
# String type
# int cost
# HabitatTypes habitatTypes
+ <<Create>> Habitat(Player,int,int,int,String,int,int,HabitatTypes)
+ <<Create>> Habitat(JSONObject,Player)
+ int getCost()
+ HabitatTypes getHabitatTypes()
+ int getDailyCost()
+ String getType()
+ int getMaxCapacity()
+ List<Animal> getAnimalsInHabitat()
+ Map<String,Animal> getMapNameToBird()
+ int getCostOfNewNest()
+ int getAmountOfChargingStations()
+ int getCostOfChargingStation()
+ void setCostOfChargingStation(int)
+ int getRelaxingFactor()
+ void increaseChargingStations()
+ List<Animal> getAnimals()
+ boolean isEnoughSpace()
+ void addAnimalToHabitat(Animal)
+ void IncreaseSizeOfHabitat()
+ String getNameOfHabitat()
+ void decreaseNests(int)
+ int getAvaliableNests()
}
class dhbw.ipoat.Main {
+ {static} void main(String[])
}
class dhbw.ipoat.employee.Employee {
- {static} int employeeCounter
- {static} int recruitmentFee
- EmployeeNames name
- int dailyCost
- String employeeID
+ <<Create>> Employee()
+ {static} int getRecruitmentFee()
+ int getDailyCost()
+ String getEmployeeID()
+ EmployeeNames getName()
}
class dhbw.ipoat.savesystem.JsonConstants {
+ {static} String SAVEGAMEFILE
+ {static} String PLAYERS
+ {static} String NAME
+ {static} String MON
+ {static} String INV
+ {static} String HAB
+ {static} String MED
+ {static} String TRA
+ {static} String DEFAULTSAVEGAME
}
class dhbw.ipoat.habitat.Stall {
+ <<Create>> Stall(Player)
}
class dhbw.ipoat.commands.Commands {
- Player player
- Boolean autosave
+ <<Create>> Commands(Player)
+ Boolean getAutosave()
+ void buy(String)
+ void save()
+ void setAutosave()
+ void send(String)
+ void putCartBeforeAnimals(String)
+ void increase(String)
+ void stats()
+ void sackEmployee(String)
+ void recruitNewEmployee()
+ void nextDay()
- void letAnimalRest(Animal)
+ void help()
+ void listAllObjectsOfAType()
- void addMediumToPlayer(Medium)
- void determineHabitat(Animal)
- void addAnimal(Habitat,Animal)
+ void sellObject(String)
+ void loadTransportDevice(String)
+ void attachTransport(String)
+ void removeMediumFromTransport(String)
+ void breed(String)
- void resetBreedingCooldown(Animal)
+ void getPuffer(String)
+ void getInventory(String)
}
class dhbw.ipoat.animals.birds.Bird {
- Bag bag
+ <<Create>> Bird(Player,int,int,int,String,float,float,HabitatTypes)
+ <<Create>> Bird(BabyAnimals)
+ <<Create>> Bird(JSONObject,Player)
+ Bag getBag()
+ {static} boolean doesThisAnimalExist(String)
}
class dhbw.ipoat.animals.mammals.Mammal {
- Backpack backpack
# Employee rider
+ <<Create>> Mammal(Player,int,int,int,String,float,float,HabitatTypes)
+ <<Create>> Mammal(BabyAnimals)
+ Backpack getBackpack()
+ {static} boolean doesThisAnimalExist(String)
}
class dhbw.ipoat.player.Player {
- List<Medium> avaliableMedia
- int day
- String name
- float money
- float amountDataTransmitted
- HashMap<String,TransportDevice> allTransportDevices
- HashMap<String,Habitat> habitatDict
- HashMap<String,TransportDevice> transportDict
- HashMap<String,Medium> mediumDict
- HashMap<String,Computer> computerDict
- HashMap<String,Employee> employeeDict
+ <<Create>> Player()
+ HashMap<String,Employee> getEmployeeDict()
+ HashMap<String,Medium> getMediumDict()
+ HashMap<String,Computer> getComputerDict()
+ HashMap<String,TransportDevice> getTransportDict()
+ String getName()
+ HashMap<String,Habitat> getHabitatDict()
+ HashMap<String,TransportDevice> getAllTransportDevices()
+ float getAmountDataTransmitted()
+ void setAmountDataTransmitted(float)
+ void moneyTransactions(float)
+ List<Medium> getAvaliableMedia()
+ void setAvaliableMedia(List<Medium>)
+ float getMoney()
+ void setMoney(int)
+ void NextDay()
+ int getDay()
+ void setDay(int)
+ boolean checkForDoubleNames(String)
+ void unloadData(float)
+ List<Animal> getAllAnimals()
+ TransportDevice getTransportDeviceWithName(String)
+ void addAnimalToHabitat(Animal)
+ void removeAnimalFromArchives(Animal)
+ Medium getMediumWithName(String)
+ Animal getAnimalWithName(String)
}
class dhbw.ipoat.Terminal {
- boolean debug
+ String in()
+ void out(String)
+ void debug(String)
}
class dhbw.ipoat.transportationdevice.TransportDevice {
# List<Medium> mediaInDevice
# int maxObjects
# int cost
# int costForUpgrade
# float weight
# float probabilityOfFailure
# String uuid
# Player player
# String type
+ <<Create>> TransportDevice(Player,int,int,float,String)
+ String getUuid()
+ String getType()
+ int getMaxObjects()
+ void attachDevice(Animal)
+ float calculateWeight()
+ void removeObject(Medium)
+ List<Medium> getMediaInDevice()
+ void load(Player,Animal)
+ void putMedium(Medium)
+ void unloadData()
+ float calculateData()
+ void increaseSize()
# void notifyPlayer(String)
+ TransportDevice getTransportDevice()
}
class dhbw.ipoat.medium.FloppyDisk {
+ <<Create>> FloppyDisk(Player)
}
class dhbw.ipoat.animals.Animal {
# int age
# int maxAge
# int speed
# int energy
# int cost
# String name
# String type
# boolean home
# boolean delivering
# float maxWeight
# Player player
# float deathProbability
# float percentageMoved
# TransportDevice device
# boolean gender
# int breedingCooldown
# HabitatTypes habitatType
+ <<Create>> Animal(Player,int,int,int,String,float,float,HabitatTypes)
+ <<Create>> Animal(JSONObject,Player)
+ <<Create>> Animal(BabyAnimals)
+ boolean isDelivering()
+ HabitatTypes getHabitatType()
+ int getMaxAge()
+ void setBreedingCooldown(int)
+ int getBreedingCooldown()
+ TransportDevice getDevice()
+ int getSpeed()
+ void setDevice(TransportDevice)
+ void agingAnimal()
+ String getName()
+ void killAnimal()
- boolean checkForAttachedTransport()
+ boolean isGender()
+ void moveAnimal()
+ float calculateValueOfAnimal()
+ void setHome(boolean)
+ float getDeathProbability()
+ int getCost()
+ String getTypeOfAnimal()
+ boolean isHome()
+ int getAge()
+ int getEnergy()
+ float getMaxWeight()
+ void setEnergy(int)
}
class dhbw.ipoat.transportationdevice.Backpack {
+ <<Create>> Backpack(Player)
}
enum dhbw.ipoat.employee.Occupations {
+  NONE
+  RIDING
+  LOADING
}
abstract class dhbw.ipoat.encrypt.Encryption {
- {static} int[][] encryptingArray
- {static} int chunkSize
- {static} int seedLength
- {static} void setupEncryptingArray()
+ {static} String doEncryption(String)
+ {static} String doDecrypting(String)
- {static} char decryptCharacter(String)
- {static} String generateSeed()
- {static} void swapAxis(boolean,String)
- {static} void buildOutput()
}
class dhbw.ipoat.animals.mammals.Elephant {
+ <<Create>> Elephant(Player)
}
enum dhbw.ipoat.animals.mammals.MammalList {
+  Ox
+  Horse
+  Elephant
}
enum dhbw.ipoat.habitat.HabitatTypes {
+  STALL
+  BIRDHOUSE
}


dhbw.ipoat.animals.Animal <|-- dhbw.ipoat.animals.GrownAnimals
dhbw.ipoat.animals.birds.Bird <|-- dhbw.ipoat.animals.birds.Pigeon
dhbw.ipoat.animals.mammals.Mammal <|-- dhbw.ipoat.animals.mammals.Ox
dhbw.ipoat.animals.Animal <|-- dhbw.ipoat.animals.BabyAnimals
dhbw.ipoat.habitat.Habitat <|-- dhbw.ipoat.habitat.BirdHouse
dhbw.ipoat.transportationdevice.TransportDevice <|-- dhbw.ipoat.transportationdevice.Cart
dhbw.ipoat.animals.mammals.Mammal <|-- dhbw.ipoat.animals.mammals.Horse
dhbw.ipoat.transportationdevice.TransportDevice <|-- dhbw.ipoat.transportationdevice.Bag
dhbw.ipoat.habitat.Habitat <|-- dhbw.ipoat.habitat.Stall
dhbw.ipoat.animals.GrownAnimals <|-- dhbw.ipoat.animals.birds.Bird
dhbw.ipoat.animals.GrownAnimals <|-- dhbw.ipoat.animals.mammals.Mammal
dhbw.ipoat.GUI <|.. dhbw.ipoat.Terminal
dhbw.ipoat.medium.Medium <|-- dhbw.ipoat.medium.FloppyDisk
dhbw.ipoat.transportationdevice.TransportDevice <|-- dhbw.ipoat.transportationdevice.Backpack
dhbw.ipoat.animals.mammals.Mammal <|-- dhbw.ipoat.animals.mammals.Elephant
@enduml